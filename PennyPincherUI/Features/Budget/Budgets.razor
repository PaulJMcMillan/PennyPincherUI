@page "/budgets"
@using PennyPincherUI.ViewModels
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Budgets</h3>

<style>
    .custom-table {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
    font-size: 12px;
    text-align: left;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .custom-table th, .custom-table td {
    padding: 6px 7px;
    border: 1px solid #ddd;
    }

    .custom-table th {
    background-color: #f4f4f4;
    color: #333;
    }

    .custom-table tr:nth-child(even) {
    background-color: #f9f9f9;
    }

    .custom-table .amount.negative {
    color: red;
    }

    .custom-table .amount.positive {
    color: green;
    }

    .action-btn {
    padding: 3px 6px;
    margin-right: 2px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 2px;
    cursor: pointer;
    font-size: 12px;
    }

    .action-btn:hover {
    background-color: #0056b3;
    }

    .button-link {
    display: inline-block;
    padding: 1px 1px 1px 1px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 3px;
    font-size: 12px;
    cursor: pointer;
    margin: 1px 1px 1px 1px;
    }

    .button-link:hover {
    background-color: #0056b3;
    }
</style>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (_budgetViewModels != null && _budgetViewModels.Any())
{
    <a href="javascript:void(0)" @onclick="() => Create()" class="button-link">Create</a>

    <table class="custom-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>Frequency</th>
                <th>Due Date</th>
                <th>Pay Date</th>
                <th>Notes</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Number of Payments</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var budget in _budgetViewModels)
            {
                <tr>
                    <td>@budget.Name</td>
                    <td>@budget.Amount.ToString("C")</td>
                    <td>@budget.FrequencyName</td>
                    <td>@budget.DueDate.ToShortDateString()</td>
                    <td>@budget.PayDate.ToShortDateString()</td>
                    <td>@budget.Notes</td>
                    <td>@budget.StartDate.ToShortDateString()</td>
                    <td>@budget.EndDate.ToShortDateString()</td>
                    <td>@budget.NumberOfPayments</td>
                    <td>
                        <a href="javascript:void(0)" @onclick="() => Edit(budget.Id)" class="button-link">Edit</a>
                        <a href="javascript:void(0)" @onclick="() => Delete(budget.Id)" class="button-link">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Not found</p>
}

@code {
    private List<PennyPincherUI.ViewModels.BudgetViewModel> _budgetViewModels = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _budgetViewModels = await GetViewModels(1);
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log or show an error message)
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Create()
    {
        NavigationManager.NavigateTo("/create-budget");
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/edit-budget/{id}");
    }

    private void Delete(int id)
    {
        NavigationManager.NavigateTo($"/delete-budget/{id}");
    }

    private async Task<List<BudgetViewModel>> GetViewModels(int entityId)
    {
        var budgets = await Http.GetFromJsonAsync<List<PennyPincherShared.Models.Budget>>($"https://localhost:7178/api/Budget/GetAllBudgetsByEntityId/{entityId}");

        if (budgets == null)
        {
            return _budgetViewModels;
        }

        foreach (var budget in budgets)
        {
            _budgetViewModels.Add(new BudgetViewModel
            {
                    Id = budget.Id,
                    Name = budget.Name,
                    Amount = budget.Amount,
                    FrequencyId = budget.FrequencyId,
                    DueDate = budget.DueDate,
                    PayDate = budget.PayDate,
                    Notes = budget.Notes,
                    StartDate = budget.StartDate,
                    EndDate = budget.EndDate,
                    EntityId = budget.EntityId,
                    NumberOfPayments = budget.NumberOfPayments,
                    FrequencyName = ((PennyPincherShared.Enums.FrequencyEnum)budget.FrequencyId).ToString()
            });
        }

        return _budgetViewModels;
    }
}
